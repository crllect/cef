diff --git third_party/blink/public/web/web_element.h third_party/blink/public/web/web_element.h
index 103cbab74b515..3b763e5100340 100644
--- third_party/blink/public/web/web_element.h
+++ third_party/blink/public/web/web_element.h
@@ -82,6 +82,9 @@ class BLINK_EXPORT WebElement : public WebNode {
   WebString TextContent() const;
   WebString TextContentAbridged(unsigned int max_length) const;
   WebString InnerHTML() const;
+  WebString AttributeLocalName(unsigned index) const;
+  WebString AttributeValue(unsigned index) const;
+  unsigned AttributeCount() const;
 
   // Returns true if the element's contenteditable attribute is in the true
   // state or in the plaintext-only state:
diff --git third_party/blink/renderer/core/exported/web_element.cc third_party/blink/renderer/core/exported/web_element.cc
index f05470ff9c673..7ffee95e4540b 100644
--- third_party/blink/renderer/core/exported/web_element.cc
+++ third_party/blink/renderer/core/exported/web_element.cc
@@ -118,6 +118,24 @@ void WebElement::SetAttribute(const WebString& attr_name,
                                   IGNORE_EXCEPTION_FOR_TESTING);
 }
 
+unsigned WebElement::AttributeCount() const {
+  if (!ConstUnwrap<Element>()->hasAttributes())
+    return 0;
+  return ConstUnwrap<Element>()->Attributes().size();
+}
+
+WebString WebElement::AttributeLocalName(unsigned index) const {
+  if (index >= AttributeCount())
+    return WebString();
+  return ConstUnwrap<Element>()->Attributes().at(index).LocalName();
+}
+
+WebString WebElement::AttributeValue(unsigned index) const {
+  if (index >= AttributeCount())
+    return WebString();
+  return ConstUnwrap<Element>()->Attributes().at(index).Value();
+}
+
 WebString WebElement::TextContent() const {
   return ConstUnwrap<Element>()->textContent();
 }
